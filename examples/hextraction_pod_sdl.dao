# Adapted from SDL library:

# Single file deployment (run from Dao project root diretory):
# make -f Makefile.daomake macosx MODE=debug OPTIONS="--reset --option-BUNDLE-SCRIPT modules/DaoGraphics/examples/hextraction_pod_sdl --option-BUNDLE-RESOURCES modules/DaoGraphics/media/hextraction_pod/hextraction_pod.obj"

# Note for compiling SDL2 for IOS with OpenGL ES3:
# -- Modify src/video/uikit/SDL_uikitopenglview.h, to include "ES3";
# -- Modify src/video/uikit/SDL_uikitopenglview.m:
#    1. Change: context = [[EAGLContext alloc] initWithAPI:api sharegroup:shareGroup];
#       To: context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES3];
#    2. Change: [context presentRenderbuffer:GL_RENDERBUFFER_OES];
#       To: [context presentRenderbuffer:GL_RENDERBUFFER];
#    3. Remove "OES" suffix from the functions;
#    4. Remove "_OES" suffix from the constants;

load aux
load sdl
load graphics
load example_utility

var WINDOW_WIDTH  = 960
var WINDOW_HEIGHT = 640

var resource = Graphics::Resource()

routine LoadScene()
{
	scene = resource.LoadObjFile( "../media/hextraction_pod/hextraction_pod.obj" )

	# light types not supported yet!
	light = Graphics::Light( $spot, 0.5, 0.5, 0.5 )
	light.Move( 800, 500, 400 )
	scene.AddNode( light );

	light = Graphics::Light( $spot, 0.5, 0.5, 0.5 )
	light.Move( 0, 800, 0 )
	scene.AddNode( light );

	camera = Graphics::Camera()
	camera.Move( 800, 800, 800 )
	camera.LookAt( 0, 300, 0 );
	camera.SetFarPlane( 50000 );
	camera.SetFOV( 60 );
	camera.Orient( $Y );
	scene.AddNode( camera );
	return scene, camera
}

# Call this instead of exit(), so we can clean up SDL: atexit() is evil. 
routine Abort( message: string )
{
    std.error( message )
}

routine EventFilter( userdata: any, event: SDL_Event )
{
	io.writeln( "EventFilter:", event.type )
    switch (event.type)
    {
    case SDL_APP_TERMINATING:
        return false;
    case SDL_APP_LOWMEMORY:
        return false;
    case SDL_APP_WILLENTERBACKGROUND:
        return false;
    case SDL_APP_DIDENTERBACKGROUND:
        return false;
    case SDL_APP_WILLENTERFOREGROUND:
        return false;
    case SDL_APP_DIDENTERFOREGROUND:
        return false;
    default:
        return true;
    }
	return true
}

routine main()
{
	#SDL_SetEventFilter( EventFilter, none );

	SDL_Init(SDL_INIT_VIDEO);
	
	if( Graphics::Backend() == $OpenGL ){
		SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE );
        #No need to SDL2-2.0.3 for MacOSX:
		#SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
		#SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 2);
	}else if( Graphics::Backend() == $OpenGLES ){
		SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_ES );
		SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
		SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 0);
	}else{
		Abort( "Invalid backend" );
	}

	SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
	SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24);
	SDL_GL_SetAttribute(SDL_GL_MULTISAMPLEBUFFERS, 8);
	SDL_GL_SetAttribute(SDL_GL_MULTISAMPLESAMPLES, 8);

	if( SDL_GetNumVideoDisplays() == 0 ) Abort( "No display available" );

	display = SDL_DisplayMode();
	if( SDL_GetCurrentDisplayMode( 0, display ) ) Abort( "No valid display available" );

	WINDOW_WIDTH = display.w * 0.8;
	WINDOW_HEIGHT = display.h * 0.8;

	window = SDL_CreateWindow( "test", 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, SDL_WINDOW_OPENGL );
    if( window == none ) Abort( "Window creation failed" );

	renderer = SDL_CreateRenderer( window, 0, SDL_WINDOW_OPENGL );
    if( renderer == none ) Abort( "Renderer creation failed" );

	var (scene, camera) = LoadScene()
	var dao_context = Graphics::Context( WINDOW_WIDTH, WINDOW_HEIGHT )
	var dao_renderer = Graphics::Renderer( dao_context );
	dao_renderer.SetCurrentCamera( camera )

	# Main render loop 
	event = SDL_Event();
	done = 0;
	timestamp = 0;
	while (!done) {
		# Check for events 
		if( SDL_PollEvent(event) == 0 ) skip;
		x = 0;
		y = 0;
		if( event.type == SDL_KEYDOWN ){
			io.writeln( "Key Pressed:", event.key.keysym.sym )
			switch( event.key.keysym.sym ){
			case SDLK_LEFT  : MoveCameraByDirection( camera, $left );
			case SDLK_RIGHT : MoveCameraByDirection( camera, $right );
			case SDLK_UP    : MoveCameraByDirection( camera, $up );
			case SDLK_DOWN  : MoveCameraByDirection( camera, $down );
			case SDLK_PLUS  : ZoomCamera( camera, $in )
			case SDLK_MINUS : ZoomCamera( camera, $out )
			case SDLK_EQUALS : if( event.key.keysym.mod & KMOD_LSHIFT ) ZoomCamera( camera, $in )
			}
		}else if( event.type == SDL_FINGERMOTION ){
			max = 2.0 * ComputeMoveStep( camera )
			io.writeln( "Finger moved:", max, event.tfinger.dx, event.tfinger.dy )
			camera.MoveBy( -max*event.tfinger.dx, -max*event.tfinger.dy, 0 );
		}else if( event.type == SDL_FINGERDOWN ){
			x = event.tfinger.x;
			y = event.tfinger.y;
		}else if( event.type == SDL_FINGERUP ){
			max = 2.0 * ComputeMoveStep( camera )
			io.writeln( "Finger moved2:", max, event.tfinger.x - x, event.tfinger.y - y )
			#camera.MoveBy( -max*event.tfinger.x - x, -max*event.tfinger.y - y, 0 );
		}
		if( timestamp ){
			if( event.key.keysym.sym == SDLK_ESCAPE ) break;
			#if( event.type != SDL_MOUSEMOTION or event.motion.timestamp == timestamp ) skip;
		}

		timestamp = event.motion.timestamp;
		dao_renderer.Render( scene )
		SDL_RenderPresent( renderer );
	}
	dao_context.Quit()
	SDL_Quit();
	return 0;
}
